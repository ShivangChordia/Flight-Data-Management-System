@using Ground_Terminal_Management_System.Data
@using Microsoft.EntityFrameworkCore
@page "/realtime-telemetry"
@inject FdmsDbContext DbContext

<h3>Real-Time Telemetry</h3>

@if (realTimeData is null)
{
    <p>Loading telemetry data...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Timestamp</th>
                <th>AccelX</th>
                <th>AccelY</th>
                <th>AccelZ</th>
                <th>Altitude</th>
                <th>Pitch</th>
                <th>Bank</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var telemetry in realTimeData)
            {
                <tr>
                    <td>@telemetry.Timestamp</td>
                    <td>@telemetry.AccelX</td>
                    <td>@telemetry.AccelY</td>
                    <td>@telemetry.AccelZ</td>
                    <td>@telemetry.Altitude</td>
                    <td>@telemetry.Pitch</td>
                    <td>@telemetry.Bank</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FdmsDbContext.TelemetryData> realTimeData;

    protected override async Task OnInitializedAsync()
    {
        // Simulate loading real-time data (this can be replaced with real logic for real-time updates)
        realTimeData = await DbContext.TelemetryRecords
            .OrderByDescending(t => t.Timestamp)
            .Take(50) // Limit to the most recent 50 records
            .ToListAsync();
    }
}